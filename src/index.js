#!/usr/bin/env node

const http = require('http');
const Greenlock = require('greenlock-express')
const redirectHttps = require('redirect-https');
const spdy = require('spdy');
const config = require('./services/config');
const checkIfAlreadyRunning = require('./services/is-already-running');
const bannerMessage = require('./services/cli-banner-message');
const app = require('./app');

function showError(str) {
    console.error(str);
    if (process.pkg) setInterval(() => {}, 10000); // In desktop app mode, keep the process alive
    else process.exit(1); // In command line mode, exit with error code
}

(async function main() {
    if (await checkIfAlreadyRunning()) {
        return showError('ERROR: RPNow is already running');
    }

    // TODO get e-mail
    const email = 'jon@example.com';

    // TODO ask about https
    const agreeTos = true;

    const greenlock = Greenlock.create({
        version: 'draft-11',

        // server: 'https://acme-v02.api.letsencrypt.org/directory',
        // Note: If at first you don't succeed, stop and switch to staging
        server: 'https://acme-staging-v02.api.letsencrypt.org/directory',

        // You MUST change this to a valid email address
        email, 

        // You MUST NOT build clients that accept the ToS without asking the user
        agreeTos,

        approveDomains(options, certs, callback) {
            console.log({ options, certs });
            return callback(null, { options, certs });
        },

        configDir: config.dataDir,

        communityMember: false,
        securityUpdates: false,

        debug: true,
    });


    const httpCallback = greenlock.middleware(function (req, res) {
        // console.log(Object.keys(req))
        console.log(req.headers.host)
        // TODO ??? this should be here, documentation is wrong
        console.log(Greenlock.isValidDomain(req.headers.host))
        // console.log('http req', req.get('host'));
        // redirectHttps(req, res)
        // res.setHeader('Content-Type', 'text/html; charset=utf-8');
        // res.end('<h1>Hello, ⚠️ Insecure World!</h1><a>Visit Secure Site</a>'
        //     + '<script>document.querySelector("a").href=window.location.href.replace(/^http/i, "https");</script>'
        // );
        app(req, res);
    });
    http.createServer(httpCallback).listen(80, function() { console.log("http: ", this.address()) });



    const spdyOptions = {
        ... greenlock.tlsOptions,
        spdy: {
            protocols: ['h2', 'http/1.1'],
            plain: false
        }
    };
    const server = spdy.createServer(spdyOptions, app);
    server.on('error', err => showError(`ERROR: RPNow failed to start: ${err}`));
    server.on('listening', function () {
        // delay logging this until messages generated by vue-pronto are done
        setTimeout(() => console.log(bannerMessage), 2000);
    });
    server.listen(443);
}());
