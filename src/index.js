#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');
const GreenlockExpress = require('greenlock-express')
const DB = require('./services/database');
const { isAlreadyRunning, notifyRunning } = require('./services/is-already-running');
const bannerMessage = require('./services/cli-banner-message');
const httpsPrompts = require('./services/https-prompts');
const app = require('./app');

function showError(str) {
    console.error(str);

    if (process.pkg) {
        // In desktop app mode, keep the process alive
        console.error('(Press Ctrl+C to exit.)')
        setInterval(() => {}, 10000); 
    } else {
        // In command line mode, exit with error code
        process.exit(1);
    }
}

(async function main() {
    // determine data directory
    const dataDir = path.join(process.env.APPDATA || os.homedir(), 'rpnow_data');

    // if not exists
    if (!fs.existsSync(dataDir)){
        // if interactive, prompt to make sure creating a directory is ok
        // TODO

        // create directory
        fs.mkdirSync(dataDir);
    }

    // initialize db
    await DB.open(dataDir);

    // check if the server is already running (or ports are used)
    if (await isAlreadyRunning(dataDir)) {
        return showError('ERROR: RPNow is already running');
    }

    // get remaining config (may trigger prompts if interactive)
    // const { https, letsencryptTos, letsencryptEmail, domain } = await httpsPrompts();
    const config = {
        httpPort: (+process.env.RPNOW_PORT) || 80,
        https: false,
        httpsPort: 443,
        domain: '',
        letsencryptAgree: false,
        letsencryptEmail: '',
        trustProxy: (process.env.RPNOW_TRUST_PROXY || '').toLowerCase() === 'true',
    };

    // write lastport.lock
    notifyRunning(dataDir, config.httpsPort || config.httpPort)

    // enable trustProxy?
    if (config.trustProxy) app.enable('trust proxy');

    // start server
    if (config.https) {
        if (!config.letsencryptAgree) return showError("ERROR: You must accept the Let's Encrypt TOS to use this service.");

        const httpsServer = GreenlockExpress.create({
            app,

            email: config.letsencryptEmail,
            agreeTos: config.letsencryptAgree,
            approvedDomains: [config.domain],
            configDir: dataDir,

            communityMember: false,
            securityUpdates: false,
            telemetry: true,
        });
        httpsServer.listen(config.httpPort, config.httpsPort, (err) => {
            if (err) return showError(`ERROR: RPNow failed to start: ${err}`);

            // delay logging this until messages generated by vue-pronto are done
            setTimeout(() => console.log(bannerMessage(config)), 2000);
        });
    } else {
        app.listen(config.httpPort, (err) => {
            if (err) return showError(`ERROR: RPNow failed to start: ${err}`);

            // delay logging this until messages generated by vue-pronto are done
            setTimeout(() => console.log(bannerMessage(config)), 2000);
        });
    }
}());
